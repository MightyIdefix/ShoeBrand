/*Using scss will make it easier to use nesting with the css
  I've used Live Sass Compiler to compile my scss code into css, 
  so I can link my css file to my html files and just code in the scss file
  the code will that be be compiled to css */
/*I'm making this webpage with mobile first css. This means that my focus with the css is to design
  the webpage with the width of a mobile device and after this scale it up to bigger width for fx
  a laptop.
  This is because many people look at webpages with their phones. By dooing this I can start out with 
  a simpler design at the beginning since the phones are smaller and than make more detains as the page gets bigger.*/
body {
  margin: 1.5em;
  font-family: 'Poppins', sans-serif;
}

a {
  text-decoration: none;
  font-size: 1.3rem;
}

.hero-img {
  position: absolute;
  top: 0;
  left: 0;
  background: url("../../images/shoe.jpg");
  background-size: cover;
  background-position-x: 20%;
  background-position-y: 20%;
  width: 100%;
  height: 100vh;
  z-index: -1;
  /*This animation will last for 2 seconds and only be shown once (forward)*/
  animation: introLoad 2s forwards;
}

/*I'm making a new animation for the .hero-img with the keyframes.
  It goes from one clip-path to an other. 
  The clip-path property lets you clip an element to a basic shape or to an SVG source. 
  These clip-paths are found with https://bennettfeely.com/clippy/*/
@keyframes introLoad {
  from {
    clip-path: polygon(0 0, 100% 0, 100% 0, 0 0);
  }
  to {
    clip-path: polygon(0 0, 100% 0, 100% 100%, 0 100%);
  }
}

.logo {
  color: white;
  font-weight: bold;
}

nav {
  position: fixed;
  right: 0;
  top: 0;
  height: 100vh;
  background: white;
  width: 50%;
  z-index: 999;
  text-transform: uppercase;
  transform: translateX(100%);
  transition: transform .5s ease-in-out;
}

nav ul {
  list-style-type: none;
  padding: 0;
  margin-top: 8em;
}

nav ul a {
  color: black;
  padding: .75em 2em;
  display: block;
  width: 100%;
}

nav ul a:hover {
  background: #e7e7e7;
}

nav .close {
  float: right;
  margin: 2em;
  width: 2.5em;
}

header {
  display: flex;
  justify-content: space-between;
}

header svg {
  width: 2.3em;
  margin-top: -.6em;
  cursor: pointer;
}

h1 {
  font-size: 3rem;
  margin-top: 2em;
  line-height: 3.3rem;
}

.subhead {
  font-size: 1.4rem;
}

section.hero {
  color: white;
  height: 90vh;
  animation: moveDown 1s ease-in-out forwards;
  opacity: 0;
}

section.hero .down-arrow {
  stroke: white;
  position: absolute;
  bottom: 2em;
  width: 1em;
  /*The alternate-reverse property value makes it so the animation is played backwards first, then forwards
      The infinite property value makes it so the animation runs infinite*/
  animation: moveArrow 1s alternate-reverse infinite;
}

section.hero .down-arrow path {
  fill: white;
}

@keyframes moveDown {
  from {
    transform: translateY(-100px);
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

/*This animation moves the arrow up and down by using transform: translate 
  CSS transforms allow you to move, rotate, scale, and skew elements.
  The translate() method moves an element from its current position (according to the parameters given for the X-axis and the Y-axis).
  With the translate() method it just moves it the y-axis*/
@keyframes moveArrow {
  from {
    transform: translateY(-30px);
  }
  to {
    transform: translateY(0);
  }
}

.more-info img {
  width: 100%;
  object-fit: cover;
  height: 11em;
}

.more-info .title {
  font-weight: bold;
  font-size: 1.25rem;
}

.more-info .description {
  line-height: 1.5rem;
  font-weight: lighter;
}

@media only screen and (min-width: 680px) {
  body {
    margin: 1.5em 5em;
    font-family: 'Poppins', sans-serif;
  }
}

@media only screen and (min-width: 920px) {
  .menu {
    display: none;
  }
  nav {
    transform: translateX(0);
    position: unset;
    display: block;
    width: auto;
    height: auto;
    background: none;
  }
  nav svg.close {
    display: none;
  }
  nav ul {
    display: flex;
    margin: 0;
  }
  nav ul a {
    color: white;
    padding: .5em 1.5m;
    font-size: .9rem;
  }
  nav ul ahover {
    background: none;
    text-decoration: underline;
  }
  .hero-img {
    left: unset;
    right: 0;
    width: 50%;
    height: 42em;
  }
  .logo {
    color: black;
  }
  .logo span {
    color: red;
  }
  section.hero {
    color: black;
    height: auto;
    width: 40%;
    margin-bottom: 8em;
  }
  section.hero svg.down-arrow {
    stroke: black;
    position: unset;
  }
  section.hero svg.down-arrow path {
    fill: black;
  }
  .feature {
    display: grid;
    grid-template-columns: repeat(2, auto);
    gap: 3em;
    margin-bottom: 8em;
  }
  .feature img {
    width: 25em;
  }
  .feature .content {
    text-align: right;
    width: 25em;
  }
  .feature.left {
    grid-template-areas: "left right";
  }
  .feature.left img {
    grid-area: left;
  }
  .feature.left .content {
    text-align: left;
    width: 25em;
    justify-self: left;
  }
}

@media only screen and (min-width: 1200px) {
  wrapper {
    width: 1200px;
    /*a quick way to make the elements centered so they won't resize as the page size gets bigger*/
    margin: 0 auto;
  }
  .feature {
    gap: 0;
  }
}

/*
CSS transforms allow you to move, rotate, scale, and skew elements.
The translate() method moves an element from its current position (according to the parameters given for the X-axis and the Y-axis).
With the translate() method it just moves it the x-axis. 
So when the menu icon is clicked the opn-nav function will make it so the nav element will be shown
since it won't be moved to the x-axis at all. 
*/
.open-nav {
  transform: translateX(0%);
}
